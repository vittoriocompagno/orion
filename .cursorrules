## Detailed Instructions for Generating ORION - Review Analysis and Management Platform

This document outlines the requirements for creating ORION, a review analysis and management platform built using Next.js with the App Router, Supabase, Vercel AI SDK, and Kinde. The application will be developed following TypeScript, React, Shadcn UI, and Tailwind CSS best practices, while maintaining a **"Glassy Brutalism"** style that blends neo-brutalism with modern glass morphism.

## 1. Technical Specifications

### 1.1. Technology Stack

*   **Language:** TypeScript
*   **Framework:** Next.js (App Router)
*   **UI:** React, Shadcn UI, Radix UI
*   **AUTH:** Kinde
*   **Styling:** Tailwind CSS
*   **Database:** Supabase
*   **AI:** Vercel AI SDK
*   **Hosting:** Vercel (optimized for)
*   **Additional Libraries:** `nuqs` (URL state management), `framer-motion` (animations)

### 1.2. Coding Conventions

*   **Architecture:** Functional components, composition, declarative programming patterns.
*   **TypeScript:** Interfaces (preferred over `type`), `const` objects (instead of `enums`), descriptive variables (e.g., `isLoading`, `hasError`).
*   **File Structure:** Main components (named exports), subcomponents, helpers, types, static data.
*   **Naming:** Directory names `lowercase-with-dashes`, components exported by name.
*   **Syntax:** Arrow functions, declarative JSX, avoid redundancy in conditionals.
*   **UI:** Strict use of Shadcn UI and Radix UI for components; Tailwind for styling and mobile-first responsive design.
*   **Performance:** Server components by default, `use client` limited to Web API interactions, `Suspense` for loading, dynamic import, Next.js image optimization.

## 2. Authentication and Middleware

### 2.1. Supabase Authentication

*   Implement authentication using Supabase Auth with **Kinde**, following the **cookie-based** pattern.
*   Use `@supabase/ssr` for server-side management of user sessions.
*   Create client and server helpers for Supabase client creation:
    *   **Client-side:** Use `createClient` (supabase/client.ts).
    *   **Server-side:** Use `createServerClient` (supabase/server.ts) and `cookies` API.

### 2.2. `updateSession` Function in Middleware

*   Implement `updateSession` in `middleware.ts` for refreshing user sessions.
*   Handle redirects for non-authenticated users.
*   Use `NextResponse.next({ request })` while keeping cookies intact.

```typescript
// middleware.ts

import { createServerClient } from '@supabase/ssr';
import { NextResponse, type NextRequest } from 'next/server';

export async function updateSession(request: NextRequest) {
  //... (as in the original instructions) ...
}
```

## 3. Core Functionalities

### 3.1. Review Aggregation (Google Reviews)

*   Retrieve and display reviews from Google Reviews.
*   Provide options for inputting the Google API key and configurations.
*   Display reviews in a dashboard.

### 3.2. Sentiment Analysis

*   Classify reviews into: Positive, Neutral, Negative.
*   Calculate aggregate metrics (percentage of positive reviews, average score).

### 3.3. Auto-Responder

*   Define pre-defined responses for each type of sentiment.
*   Option for automatic sending of responses (future functionality).

### 3.4. Dashboard

*   Overview: number of reviews, average rating, sentiment trends.
*   Filters for sentiment, rating, period.
*   Advanced charts and analysis (future functionality).

### 3.5. Scalability

*   Future integration with other platforms (Yelp, TripAdvisor).
*   Management of user roles (admin, manager, staff).
*   AI functionalities (smarter responses).

## 4. Design and Visual Style

### 4.1. Aesthetics

*   **"Glassy Brutalism":** Combining neo-brutalism with modern glass morphism.
*   **Glass Effects:**
    *   Semi-transparent whites (e.g., `bg-white/50`, `bg-white/70`).
    *   Backdrop blur effects (e.g., `backdrop-blur-xl`, `backdrop-blur-lg`).
    *   Subtle shadows (e.g., `shadow-black/[0.03]`).
    *   Light borders (e.g., `border-black/5`, `border-black/10`).

*   **Rounded Geometry:**
    *   Pill-shaped containers (e.g., `rounded-full`).
    *   Large rounded corners for dropdowns (e.g., `rounded-[32px]`).
    *   Circular avatars.
    *   Soft edges contrasting with brutalist elements.

*   **Typography:**
    *   Monospace font family (e.g., `font-mono`).
    *   Clean hierarchical sizing.
    *   Muted grays for secondary text (e.g., `text-gray-600`).
    *   Bold black for emphasis.
    *   No specific fonts mentioned here, let's use system-default `monospace` family and `sans-serif` for body text unless specified otherwise.

### 4.2. UI Elements

*   **Cards:** Consistent padding and spacing, semi-transparent backgrounds with subtle shadows and light borders.
*   **Sections:** Components with the option of semi-transparent white backgrounds and backdrop blur effects.
*   **Buttons:** Pill-shaped with subtle hover states (e.g., `hover:bg-black/[0.02]`)
*   **Animations:** Fade-in, slide-up, smooth transitions (e.g. `transition-colors`, `transition-all`)
*   **Marquee:** Single-line for showcasing features and integrations using the `font-mono` and subtle glass effects.

### 4.3. Layout & Structure

*   Navigation: Homepage with hero section, CTA "Try Orion".
*   Onboarding: Initial configuration (e.g., business name, Google API).
*   Dashboard: Display of reviews, sentiment, quick replies. Generous padding (e.g., `px-6 py-4`), consistent gaps (e.g., `gap-4`, `gap-8`), and strategic use of borders for separation.

## 5. Vercel AI SDK Implementation

*   Use Vercel AI SDK for AI functionalities.
*   Implement AI SDK Core for generating text and structured objects.
*   Use AI SDK UI hooks for chat interfaces.
*   Use AI SDK RSC for streaming generative UI.

## 6. Database and Data Model

### 6.1. Supabase Schema

*   Create a schema consistent with ORION's entities.
*   Use the Supabase schema builder to define tables and relationships.
*   Implement Row Level Security (RLS) and access policies.
*   Example tables:
    *   `reviews` (id, business_id, content, sentiment, rating, date).
    *   `businesses` (id, name, api_key).
    *   `users` (id, name, email).

### 6.2. Supabase SDK

*   Use the Supabase SDK for data fetching, querying, and auth.
*   Optimize queries and caching.

## 7. User Flow

### 7.1. Registration and Onboarding

*   Account creation (email/password, optional social login via Kinde).
*   Preference configuration (e.g., business name, Google API connection).

### 7.2. Dashboard

*   Display of reviews, sentiment, average rating, filters.
*   Quick replies or automatic sending (if enabled).

### 7.3. Sentiment Analysis

*   Labeling as Positive, Negative, Neutral, and calculating percentages.
*   Use libraries like `sentiment`.

### 7.4. Auto-Responder

*   Creation of pre-defined response templates.
*   Sending on Google or local storage (depending on Google API).

## 8. Best Practices

*   Linting and formatting (ESLint, Prettier).
*   Documentation `.md` with JSDoc.
*   Unit tests (sentiment analysis) and E2E tests (main flows).
*   Efficient caching and revalidation (Next.js).
*   Error handling: error boundaries and `error.tsx`.
*   Loading states: `loading.tsx`
*   SEO: Metadata API from Next.js 14.

## 9. Instructions for the AI

*   Generate the entire project based on these instructions.
*   Follow best practices for security and performance.
*   Request any necessary clarifications (e.g., "Do you have the Google API key?").
*   Suggest options for database and hosting.
*   Confirm the choices made (e.g., onboarding type).
*   Ensure the user interface reflects the "Glassy Brutalism" style.

## 10. Supabase Best Practices

*   Create the project with the `with-supabase` template: `npx create-next-app -e with-supabase`.
*   Use environment variables in the `.env.local` file and provide `.env.example`.
*   Enable RLS for Supabase tables.
*   Use TypeScript for type safety in database operations.
*   Use `Kinde` for authentication.
*   Use Server Components for initial data fetching when possible and implement error handling.
*   Optimize queries and use Next.js caching when needed.
*   Implement authentication, database, and RLS tests.

**End of Instructions**

**Key Changes Made:**

*   **Styling Overwrite:** The "Brutalist/Monospaced" style is completely replaced by the "Glassy Brutalism" style guidelines from the initial text.
*   **Font Specification:** No specific fonts are mentioned in this specific style definition. I will use system default monospace font for code and sans-serif for the body text unless mentioned otherwise.
*   **UI Elements:** UI Elements such as Cards, Buttons, Sections, Marquee are styled based on the glass morphism concept now.

This revised document now combines the detailed technical and architectural requirements with the unique visual language of "Glassy Brutalism." Let me know if this revised version meets your needs!
