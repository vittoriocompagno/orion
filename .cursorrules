Okay, ecco le istruzioni riviste, senza la roadmap e tradotte in inglese:

## Detailed Instructions for Generating ORION - Review Analysis and Management Platform

This document outlines the requirements for creating ORION, a review analysis and management platform built using Next.js with the App Router, Supabase, and Vercel AI SDK. The application will be developed following TypeScript, React, Shadcn UI, and Tailwind CSS best practices, while maintaining a **brutalist/monospaced** style inspired by *cursor.com* and *awwwards.com*.

## 1. Technical Specifications

### 1.1. Technology Stack

*   **Language:** TypeScript
*   **Framework:** Next.js (App Router)
*   **UI:** React, Shadcn UI, Radix UI
*   **AUTH:** Kinde
*   **Styling:** Tailwind CSS
*   **Database:** Supabase
*   **AI:** Vercel AI SDK
*   **Hosting:** Vercel (optimized for)
*   **Additional Libraries:** `nuqs` (URL state management), `framer-motion` (animations)

### 1.2. Coding Conventions

*   **Architecture:** Functional components, composition, declarative programming patterns.
*   **TypeScript:** Interfaces (preferred over `type`), `const` objects (instead of `enums`), descriptive variables (e.g., `isLoading`, `hasError`).
*   **File Structure:** Main components (named exports), subcomponents, helpers, types, static data.
*   **Naming:** Directory names `lowercase-with-dashes`, components exported by name.
*   **Syntax:** Arrow functions, declarative JSX, avoid redundancy in conditionals.
*   **UI:** Strict use of Shadcn UI and Radix UI for components; Tailwind for styling and mobile-first responsive design.
*   **Performance:** Server components by default, `use client` limited to Web API interactions, `Suspense` for loading, dynamic import, Next.js image optimization.

## 2. Authentication and Middleware

### 2.1. Supabase Authentication

*   Implement authentication using Supabase Auth, following the **cookie-based** pattern.
*   Use `@supabase/ssr` for server-side management of user sessions.
*   Create client and server helpers for Supabase client creation:
    *   **Client-side:** Use `createClient` (supabase/client.ts).
    *   **Server-side:** Use `createServerClient` (supabase/server.ts) and `cookies` API.

### 2.2. `updateSession` Function in Middleware

*   Implement `updateSession` in `middleware.ts` for refreshing user sessions.
*   Handle redirects for non-authenticated users.
*   Use `NextResponse.next({ request })` while keeping cookies intact.

```typescript
// middleware.ts

import { createServerClient } from '@supabase/ssr';
import { NextResponse, type NextRequest } from 'next/server';

export async function updateSession(request: NextRequest) {
  //... (as in the original instructions) ...
}
```

## 3. Core Functionalities

### 3.1. Review Aggregation (Google Reviews)

*   Retrieve and display reviews from Google Reviews.
*   Provide options for inputting the Google API key and configurations.
*   Display reviews in a dashboard.

### 3.2. Sentiment Analysis

*   Classify reviews into: Positive, Neutral, Negative.
*   Calculate aggregate metrics (percentage of positive reviews, average score).

### 3.3. Auto-Responder

*   Define pre-defined responses for each type of sentiment.
*   Option for automatic sending of responses (future functionality).

### 3.4. Dashboard

*   Overview: number of reviews, average rating, sentiment trends.
*   Filters for sentiment, rating, period.
*   Advanced charts and analysis (future functionality).

### 3.5. Scalability

*   Future integration with other platforms (Yelp, TripAdvisor).
*   Management of user roles (admin, manager, staff).
*   AI functionalities (smarter responses).

## 4. Design and Visual Style

### 4.1. Aesthetics

*   **Brutalist/Monospaced:** Inspired by *cursor.com* and *awwwards.com*.
*   **Fonts:**
    *   `Space Mono` for titles, buttons.
    *   `DM Sans` for body text.
*   **Colors:**
    *   `--bg: #f5f5f5` (light gray).
    *   `black: #000000`.
*   **Layout:** Blocks, thin borders, sharp corners.

### 4.2. UI Elements

*   **Cards:** Consistent padding and spacing.
*   **Sections:** Components with gradient options.
*   **Buttons:** Pill-shaped with hover gradients.
*   **Animations:** Fade-in, slide-up, smooth transitions.
*   **Marquee:** Single-line for showcasing features and integrations.

### 4.3. Layout & Structure

*   Navigation: Homepage with hero section, CTA "Try Orion".
*   Onboarding: Initial configuration (e.g., business name, Google API).
*   Dashboard: Display of reviews, sentiment, quick replies.

## 5. Vercel AI SDK Implementation

*   Use Vercel AI SDK for AI functionalities.
*   Implement AI SDK Core for generating text and structured objects.
*   Use AI SDK UI hooks for chat interfaces.
*   Use AI SDK RSC for streaming generative UI.

## 6. Database and Data Model

### 6.1. Supabase Schema

*   Create a schema consistent with ORION's entities.
*   Use the Supabase schema builder to define tables and relationships.
*   Implement Row Level Security (RLS) and access policies.
*   Example tables:
    *   `reviews` (id, business_id, content, sentiment, rating, date).
    *   `businesses` (id, name, api_key).
    *   `users` (id, name, email).

### 6.2. Supabase SDK

*   Use the Supabase SDK for data fetching, querying, and auth.
*   Optimize queries and caching.

## 7. User Flow

### 7.1. Registration and Onboarding

*   Account creation (email/password, optional social login).
*   Preference configuration (e.g., business name, Google API connection).

### 7.2. Dashboard

*   Display of reviews, sentiment, average rating, filters.
*   Quick replies or automatic sending (if enabled).

### 7.3. Sentiment Analysis

*   Labeling as Positive, Negative, Neutral, and calculating percentages.
*   Use libraries like `sentiment`.

### 7.4. Auto-Responder

*   Creation of pre-defined response templates.
*   Sending on Google or local storage (depending on Google API).

## 8. Best Practices

*   Linting and formatting (ESLint, Prettier).
*   Documentation `.md` with JSDoc.
*   Unit tests (sentiment analysis) and E2E tests (main flows).
*   Efficient caching and revalidation (Next.js).
*   Error handling: error boundaries and `error.tsx`.
*   Loading states: `loading.tsx`
*   SEO: Metadata API from Next.js 14.

## 9. Instructions for the AI

*   Generate the entire project based on these instructions.
*   Follow best practices for security and performance.
*   Request any necessary clarifications (e.g., "Do you have the Google API key?").
*   Suggest options for database and hosting.
*   Confirm the choices made (e.g., onboarding type).
*   Ensure the user interface reflects the brutalist/monospaced style.

## 10. Supabase Best Practices

*   Create the project with the `with-supabase` template: `npx create-next-app -e with-supabase`.
*   Use environment variables in the `.env.local` file and provide `.env.example`.
*   Enable RLS for Supabase tables.
*   Use TypeScript for type safety in database operations.
*    Use `Kinde` for authentication.
*   Use Server Components for initial data fetching when possible and implement error handling.
*   Optimize queries and use Next.js caching when needed.
*   Implement authentication, database, and RLS tests.

**End of Instructions**

This revised document provides a more detailed and structured set of instructions for generating the ORION platform. It outlines technical specifications, core functionalities, visual design guidelines, and best practices to ensure a cohesive and performant application.
